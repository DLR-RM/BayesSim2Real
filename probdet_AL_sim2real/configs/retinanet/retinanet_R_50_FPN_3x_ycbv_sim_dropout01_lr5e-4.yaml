# _BASE_: "../Base-RetinaNet.yaml"
# experiment_root
OUTPUT_DIR: "./object_detection_exp/ycbv/"
MODEL:
  META_ARCHITECTURE: "ProbabilisticRetinaNet"
  WEIGHTS: "detectron2://COCO-Detection/retinanet_R_50_FPN_3x/190397829/model_final_5bd44e.pkl"

  BACKBONE:
    NAME: "build_retinanet_resnet_fpn_backbone"
  # FREEZE_AT: 5
  
  RESNETS:
    OUT_FEATURES: ["res3", "res4", "res5"]
    DEPTH: 50
  
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
  
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  
  RETINANET:
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
    SMOOTH_L1_LOSS_BETA: 0.0
    NUM_CLASSES: 21

  
  PROBABILISTIC_MODELING:
    # Settings for monte-carlo dropout
    DROPOUT_RATE: 0.1 # 0.0 for no dropout

INPUT:
    MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
    # COPYPOSE_AUG: True

DATALOADER:
    NUM_WORKERS: 4  # Depends on the available memory

SOLVER:
  IMS_PER_BATCH: 4
  # WARMUP_FACTOR: 1.0 # disable lr warmup
  # GAMMA: 1.0 # disable le decay
  BASE_LR: 5e-4  # Note that RetinaNet uses a different default learning rate
  STEPS: (50000, 80000)
  MAX_ITER: 100000
  CHECKPOINT_PERIOD: 20000

DATASETS:
  TRAIN: ("ycbv_sim",)
  TEST: ("ycbv_real_test",)

TEST:
  DETECTIONS_PER_IMAGE: 15 # maximum detections after nms in each image
  EVAL_PERIOD: 20000
